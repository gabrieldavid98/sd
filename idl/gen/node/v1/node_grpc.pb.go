// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: node/v1/node.proto

package nodev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LeibnizPiService_Compute_FullMethodName = "/proto.node.v1.LeibnizPiService/Compute"
)

// LeibnizPiServiceClient is the client API for LeibnizPiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeibnizPiServiceClient interface {
	Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error)
}

type leibnizPiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeibnizPiServiceClient(cc grpc.ClientConnInterface) LeibnizPiServiceClient {
	return &leibnizPiServiceClient{cc}
}

func (c *leibnizPiServiceClient) Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error) {
	out := new(ComputeResponse)
	err := c.cc.Invoke(ctx, LeibnizPiService_Compute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeibnizPiServiceServer is the server API for LeibnizPiService service.
// All implementations must embed UnimplementedLeibnizPiServiceServer
// for forward compatibility
type LeibnizPiServiceServer interface {
	Compute(context.Context, *ComputeRequest) (*ComputeResponse, error)
	mustEmbedUnimplementedLeibnizPiServiceServer()
}

// UnimplementedLeibnizPiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeibnizPiServiceServer struct {
}

func (UnimplementedLeibnizPiServiceServer) Compute(context.Context, *ComputeRequest) (*ComputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}
func (UnimplementedLeibnizPiServiceServer) mustEmbedUnimplementedLeibnizPiServiceServer() {}

// UnsafeLeibnizPiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeibnizPiServiceServer will
// result in compilation errors.
type UnsafeLeibnizPiServiceServer interface {
	mustEmbedUnimplementedLeibnizPiServiceServer()
}

func RegisterLeibnizPiServiceServer(s grpc.ServiceRegistrar, srv LeibnizPiServiceServer) {
	s.RegisterService(&LeibnizPiService_ServiceDesc, srv)
}

func _LeibnizPiService_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeibnizPiServiceServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeibnizPiService_Compute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeibnizPiServiceServer).Compute(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeibnizPiService_ServiceDesc is the grpc.ServiceDesc for LeibnizPiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeibnizPiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.node.v1.LeibnizPiService",
	HandlerType: (*LeibnizPiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _LeibnizPiService_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/v1/node.proto",
}
